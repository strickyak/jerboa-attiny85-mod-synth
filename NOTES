https://unix.stackexchange.com/questions/44308/understanding-udev-rules-and-permissions-in-libusb

... Finally I solved the problem by changing

# 'libusb' device nodes
SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", MODE="0664"
to

# 'libusb' device nodes
SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", MODE="0666"
in /lib/udev/rules.d/50-udev-default.rules

------------------------

It is possible to be more specific with the permissions, you can specify a device by things like USB vendor (VID) and product ID (PID). So it would be possible to make a file which would work for just your scanner, and leave all other USB devices with the default permissions. There's a page about Udev at https://wiki.archlinux.org/index.php/udev which looks useful for all this. If you make a file which starts with a higher number, like "60-my-usb-scanner.rules" (higher numbers take priority) and have a rule which lists you scanner like:

SUBSYSTEM=="usb", ATTRS{idVendor}=="f1e2", ATTRS{idProduct}=="1f2e", MODE="0666"
That should just set the permissions for the device specified (VID=0xF1E2, PID=0x1F2E, note: use lower case hex digits with udev). You can then make Udev take notice of this change by executing:

udevadm control --reload-rules

----------------------------

sudo apt remove brltty

----------------------------

ID 1781:0c9f Multiple Vendors USBtiny

----------------------------

ATtiny85 Datasheet p149:

low fuse
	$80:divide_by_8 if 0
	$40:clock output to pin, if 0
	$[21]0: SUT ( 00 BOD, 01 fast, 10 slow, 11 ? )
	$0x: CKSEL ( 0001=16MHz, 0010=8MHz, 0011=6.4 MHz )

Using "attiny-dide-1.6.x/attiny/avr/boards.txt":
for 1MHz: low=$62 ( divides 8MHz by 8 )
for 8MHz: low=$E2 ( 8 mHz )
for 16MHz: low=$F1 ( 8 mHz )
	for all three: high fuse: $df
	for all three: extend fuse: $ff

Using arduino-1.8.18 and the above:
	/dev/bus/usb/003/097
